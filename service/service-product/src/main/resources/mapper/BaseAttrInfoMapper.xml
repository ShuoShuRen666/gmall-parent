<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper SYSTEM "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.atguigu.gmall.product.mapper.BaseAttrInfoMapper">
<!--
    表示自定义映射结果集
    id：表示resultMap的唯一标识
    type：映射结果集最终返回的类型
    autoMapping：true  自动映射（实体类与数据库的字段名称）
-->
    <resultMap id="BaseAttrInfoMap" type="com.atguigu.gmall.model.product.BaseAttrInfo" autoMapping="true">
    <!--
        id：表示主键
        property：表示实体类的属性
        column：表示通过sql语句执行之后的字段名
    -->
        <id property="id" column="id"/>
    <!--
        result：表示非主键字段
    -->
<!--        <result property="attrName" column="attr_name"/>-->
<!--        <result property="categoryId" column="category_id"/>-->
<!--        <result property="categoryLevel" column="category_level"/>-->

<!--
    在 BaseAttrInfo 中有个属性 private List<BaseAttrValue> attrValueList; 这个属性没有在数据库中
    平台属性：平台属性值
    1  ：  n      需要配置mybatis的 1 ： n
-->
    <!--
        collection ：mybatis配置 1 ：n的方法
        property：实体类的属性
        ofType：返回值类型
    -->
        <collection property="attrValueList" ofType="com.atguigu.gmall.model.product.BaseAttrValue" autoMapping="true">
        <!--
            因为是关联查询，两张表中有两个id，重名了 所以需要给其中一个id起一个别名
            其他字段可以通过autoMapping自动映射
        -->
            <id property="id" column="attr_value_id"/>
        </collection>

    </resultMap>
<!--
    查询方法
    id：接口中的方法名称
    resultMap：映射结果集
    resultType：查询之后返回的类型
-->
    <select id="selectBaseAttrInfoList" resultMap="BaseAttrInfoMap">
        select
            bai.id,
            bai.attr_name,
            bai.category_id,
            bai.category_level,
            bav.id attr_value_id,
            bav.value_name,
            bav.attr_id
        from base_attr_info bai inner join base_attr_value bav
        on bai.id = bav.attr_id
        <where>
            <if test="category1Id != null and category1Id != 0">
                or (bai.category_id = #{category1Id} and bai.category_level = 1)
            </if>
            <if test="category2Id != null and category2Id != 0">
                or (bai.category_id = #{category2Id} and bai.category_level = 2)
            </if>
            <if test="category3Id != null and category3Id != 0">
                or (bai.category_id = #{category3Id} and bai.category_level = 3)
            </if>
        </where>
        order by bai.id,bai.category_level
    </select>


    <select id="selectBaseAttrInfoListBySkuId" resultMap="BaseAttrInfoMap">
        select bai.id,
               bai.attr_name,
               bai.category_id,
               bai.category_level,
               bav.id attr_value_id,
               bav.value_name,
               bav.attr_id
        from base_attr_info bai
             inner join base_attr_value bav
                        on bai.id = bav.attr_id
                 inner join sku_attr_value sav
                            on bav.id = sav.value_id
        where sav.sku_id=#{skuId}
    </select>
</mapper>